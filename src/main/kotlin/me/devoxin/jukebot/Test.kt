package me.devoxin.jukebot

import com.sedmelluq.discord.lavaplayer.player.DefaultAudioPlayerManager
import com.sedmelluq.discord.lavaplayer.source.youtube.YoutubeAudioSourceManager
import com.sedmelluq.discord.lavaplayer.tools.io.MessageInput
import com.sedmelluq.discord.lavaplayer.tools.io.MessageOutput
import com.sedmelluq.discord.lavaplayer.track.AudioPlaylist
import com.sedmelluq.discord.lavaplayer.track.AudioTrack
import com.sedmelluq.discord.lavaplayer.track.BasicAudioPlaylist
import java.io.ByteArrayInputStream
import java.io.ByteArrayOutputStream
import java.util.*

object Test {
    private val manager = DefaultAudioPlayerManager().apply {
        registerSourceManager(YoutubeAudioSourceManager())
    }

    private val playlist = ""

    @JvmStatic
    fun main(args: Array<String>) {
//        val future = CompletableFuture<AudioPlaylist>()
//
//        manager.loadItem("https://www.youtube.com/playlist?list=PLBJg8xCfBYcpJr_hicjzjwVw7gxV4H7bY", object : AudioLoadResultHandler {
//            override fun trackLoaded(track: AudioTrack) {
//                println("how")
//            }
//
//            override fun playlistLoaded(playlist: AudioPlaylist) {
//                future.complete(playlist)
//            }
//
//            override fun loadFailed(exception: FriendlyException) {
//                exception.printStackTrace()
//            }
//
//            override fun noMatches() {
//                println("fuck")
//            }
//        })
//
//        future.thenApply(::encode).thenAccept(::println).get()

        decodePlaylist(playlist).let {
            println(it.name)
            println(it.tracks.size)
        }
    }

    private fun encode(playlist: AudioPlaylist): String {
        val baos = ByteArrayOutputStream()
        val output = MessageOutput(baos)
        val stream = output.startMessage()

        val encodedTracks = playlist.tracks.map(Test::encode)

        stream.writeUTF(playlist.name)
        stream.writeInt(encodedTracks.size)

        for (track in encodedTracks) {
            stream.writeUTF(track)
        }

        output.commitMessage()
        return Base64.getEncoder().encodeToString(baos.toByteArray())
    }

    private fun encode(track: AudioTrack): String {
        val baos = ByteArrayOutputStream()
        val output = MessageOutput(baos)
        manager.encodeTrack(output, track)
        return Base64.getEncoder().encodeToString(baos.toByteArray())
    }

    private fun decodePlaylist(encoded: String): AudioPlaylist {
        val bytes = Base64.getDecoder().decode(encoded)
        val bais = ByteArrayInputStream(bytes)
        val input = MessageInput(bais)
        val stream = input.nextMessage()

        val name = stream.readUTF()
        val trackCount = stream.readInt()
        val tracks = mutableListOf<AudioTrack>()

        for (i in 0 until trackCount) {
            tracks.add(decodeTrack(stream.readUTF()))
        }

        return BasicAudioPlaylist(name, tracks, null, false)
    }

    private fun decodeTrack(encoded: String): AudioTrack {
        val bytes = Base64.getDecoder().decode(encoded)
        val baos = ByteArrayInputStream(bytes)
        return manager.decodeTrack(MessageInput(baos)).decodedTrack
    }
}