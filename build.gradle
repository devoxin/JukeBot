import org.jetbrains.kotlin.gradle.tasks.KotlinCompilationTask

group 'me.devoxin.jukebot'
version getBuildVersion()

buildscript {
    ext.kotlin_version = '1.8.10'
    ext.kotlin_coroutines = '1.6.4'
    ext.logger_version = '2.17.2'

    repositories {
        jcenter()
        mavenCentral()
    }

    dependencies {
        classpath 'com.github.jengelman.gradle.plugins:shadow:6.1.0'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

apply plugin: 'java'
apply plugin: 'kotlin'
apply plugin: 'application'
apply plugin: 'com.github.johnrengelman.shadow'

mainClassName = 'me.devoxin.jukebot.JukeBot'

java {
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
}

compileKotlin {
    kotlinOptions.jvmTarget = "11"
}

/*tasks.named('compileKotlin', KotlinCompilationTask) {
    compilerOptions.jvmTarget.set(JvmTarget.JVM_11)
}*/

repositories {
    maven {
        url 'https://m2.dv8tion.net/releases'
        name 'm2-dv8tion'
    }
    mavenCentral()
    jcenter()
    //maven { url 'https://dl.bintray.com/natanbc/maven' }
    maven { url 'https://jitpack.io' }
}

dependencies {
    implementation ('net.dv8tion:JDA:5.0.0-beta.5') {
        exclude module: 'opus-java'
    }
    implementation 'club.minnced:discord-webhooks:0.8.0'

    /* Audio */
    //implementation 'com.github.devoxin:walkyst-lavaplayer:f4ec4f3'
    implementation 'com.github.devoxin.lavaplayer:lavaplayer:68d661e'
    implementation 'com.github.walkyst.lavaplayer-fork:lavaplayer-ext-youtube-rotator:1.4.2'
    implementation 'com.sedmelluq:jda-nas:1.1.0'
    implementation 'com.github.natanbc:lavadsp:0.7.7'

    /* Database */
    implementation 'org.xerial:sqlite-jdbc:3.41.2.2'
    implementation 'com.zaxxer:HikariCP:5.0.1'
    implementation 'redis.clients:jedis:4.3.1'

    /* Command Framework */
    implementation 'com.google.guava:guava:31.1-jre'

    /* Logging */
    implementation "org.apache.logging.log4j:log4j-core:$logger_version"
    implementation "org.apache.logging.log4j:log4j-slf4j-impl:$logger_version"
    implementation 'io.sentry:sentry:1.7.30'

    /* Kotlin stdlib */
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$kotlin_coroutines"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-jdk8:$kotlin_coroutines"
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"

    /* Eval */
    implementation "org.jetbrains.kotlin:kotlin-script-runtime:$kotlin_version"
    implementation "org.jetbrains.kotlin:kotlin-script-util:$kotlin_version"
    implementation "org.jetbrains.kotlin:kotlin-compiler-embeddable:$kotlin_version"
    implementation "org.jetbrains.kotlin:kotlin-scripting-jsr223:$kotlin_version"

    implementation 'com.grack:nanojson:1.7'
    implementation 'org.jsoup:jsoup:1.15.4'
}

shadowJar {
    archiveFileName = "JukeBot.jar"
    from("src/main/Resources")
}

def getBuildVersion() {
    def gitVersion = new ByteArrayOutputStream()
    exec {
        commandLine("git", "rev-parse", "--short", "HEAD")
        standardOutput = gitVersion
    }
    return gitVersion.toString().trim()
}

tasks.register('writeVersion') {
    def resourcePath = sourceSets.main.resources.srcDirs[0]
    def resources = file(resourcePath)

    if (!resources.exists()) {
        resources.mkdirs()
    }

    file("$resourcePath/version.txt").text = getBuildVersion()
}

build.dependsOn(writeVersion)
